name: Create Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # ... PR 정보 가져오기 ...

      - name: Determine version type
        id: version-type
        run: |
          # PR 라벨 등을 기반으로 버전 타입 결정
          echo "type=patch" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            const packageJson = require(`${process.env.GITHUB_WORKSPACE}/package.json`);

            let versionType = "${{ steps.version-type.outputs.type }}";
            let versionArgs = "";

            if (versionType === "major") {
              versionArgs = "major";
            } else if (versionType === "minor") {
              versionArgs = "minor";
            } else {
              versionArgs = "patch";
            }

            // 버전 업데이트 (--no-git-tag-version은 git tag 자동 생성을 방지)
            execSync(`npm version ${versionArgs} --no-git-tag-version`);

            // 새 버전 가져오기
            const newVersion = require(`${process.env.GITHUB_WORKSPACE}/package.json`).version;

            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${newVersion}`,
              name: `Release v${newVersion}`,
              body: `Version ${newVersion} 출시`,
              draft: false,
              prerelease: false
            });

            return data;
